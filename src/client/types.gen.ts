// This file is auto-generated by @hey-api/openapi-ts

export type MangaSchema = {
    id: string;
    canvasSizeArr?: Array<number>;
    categories?: Array<string>;
    dailyUpVotes?: number;
    description?: string;
    documentURL?: string;
    editorsChoice?: boolean;
    firstCreated?: string;
    imageURL?: string;
    isPosted?: boolean;
    lastAccessed?: string;
    name?: string;
    numComments?: number;
    numDerived?: number;
    numDownloads?: number;
    numHearts?: number;
    postTime?: string;
    refTemplateTrackingID?: string;
    templateTrackingID?: Array<string>;
    timeLastUpvote?: string;
    uid?: string;
    upVotes?: number;
};

export type SearchResponseSchema = {
    total: number;
    total_pages: number;
    results: Array<{
        id: string;
        urls: {
            raw: string;
            full: string;
            regular: string;
            small: string;
            thumb: string;
        };
        user: {
            id: string;
            username: string;
            name: string;
            portfolio_url: string;
        };
        description: string;
        alt_description: string;
    }>;
};

export type RemoveImagePathSchema = {
    id: string;
};

export type ForumItem2Schema = {
    id: string;
    name: string;
    imageDataImage: string;
    lastAccessed: string;
    firstCreated: string;
    isFavorite?: boolean;
    description: string;
    categories: Array<string>;
    isFolder: boolean;
    imageURL: string;
    isFolderOpened?: boolean;
    isDocumentModified?: boolean;
    canvasSizeArr: [
        number,
        number
    ];
    fileDocURLCloud: string;
    upVotes?: number;
    hearts?: number;
    derives?: number;
    commentsCount?: number;
    numDownloads?: number;
    children?: Array<{
        [key: string]: unknown;
    }>;
    userID: string;
    userName: string;
    userBio: string;
    userprofileimage: string;
    isUpvoted?: boolean;
    isHearted?: boolean;
    isPosted?: boolean;
    isPinned?: boolean;
    hasTemplateBeenModified: boolean;
    templateTrackingID: Array<string>;
    refTemplateTrackingID: string;
};

export type ForumItemSchema = {
    id: string;
    name: string;
    imageDataImage: string;
    lastAccessed: string;
    firstCreated: string;
    isFavorite?: boolean;
    description: string;
    categories: Array<string>;
    isFolder: boolean;
    imageURL: string;
    children?: Array<ForumItem2Schema>;
    isFolderOpened?: boolean;
    isDocumentModified?: boolean;
    canvasSizeArr: [
        number,
        number
    ];
    fileDocURLCloud: string;
    upVotes?: number;
    hearts?: number;
    derives?: number;
    commentsCount?: number;
    numDownloads?: number;
    userID: string;
    userName: string;
    userBio: string;
    userprofileimage: string;
    isUpvoted?: boolean;
    isHearted?: boolean;
    isPosted?: boolean;
    isPinned?: boolean;
    hasTemplateBeenModified: boolean;
    templateTrackingID: Array<string>;
    refTemplateTrackingID: string;
};

export type StudioItemSchema = {
    id: string;
    name: string;
    imageDataImage: string;
    lastAccessed: string;
    firstCreated: string;
    isFavorite?: boolean;
    description: string;
    categories: Array<string>;
    isFolder: boolean;
    imageURL: string;
    children?: Array<ForumItem2Schema>;
    isFolderOpened?: boolean;
    isDocumentModified?: boolean;
    canvasSizeArr: [
        number,
        number
    ];
    fileDocURLCloud: string;
    upVotes?: number;
    hearts?: number;
    derives?: number;
    commentsCount?: number;
    numDownloads?: number;
    userID: string;
    userName: string;
    userBio: string;
    userprofileimage: string;
    isUpvoted?: boolean;
    isHearted?: boolean;
    isPosted?: boolean;
    isPinned?: boolean;
    hasTemplateBeenModified: boolean;
    templateTrackingID: Array<string>;
    refTemplateTrackingID: string;
    documentURL: string;
    postTime: string;
    numComments?: number;
    numHearts?: number;
    trendScore: string;
    uid: string;
};

export type InpaintImageSchema = {
    id?: string;
    name?: string;
    filePath?: string;
    sourceMangaId?: string;
    imageCategory?: string;
    fileSize?: number;
    mimeType?: string;
    isActive?: boolean;
    width?: number;
    height?: number;
    userId?: string;
    isAi?: boolean;
    aiService?: string;
    seed?: number;
    prompt?: string;
    tags?: Array<string>;
    fileUrl?: string;
};

export type InpaintImagesSchema = Array<InpaintImageSchema>;

export type SettingsConfig2Schema = {
    apiURL?: string;
    frameMargin?: number;
    frameBorderColor?: string;
    theme?: string;
    imageData?: string;
    textRotation?: number;
    textFieldSize?: number;
    frameBorderThickness?: number;
    gridEnabled?: boolean;
    canvasWidth?: number;
    frameSpacing?: number;
    textFieldFont?: string;
    textFieldFillColor?: string;
    textFieldTextColor?: string;
    canvasHeight?: number;
    textFieldBorderThickness?: number;
    frameFillColor?: string;
    tailWidth?: number;
    textFieldBorderColor?: string;
    fontStyle?: string;
};

export type UploadsSchema = {
    id: string;
    name: string;
    stageId?: string;
    filePath: string;
    sourceMangaId: string;
    imageCategory: 'characters' | 'backgrounds' | 'manga_thumbs' | 'manga_screenshots';
    fileSize: number;
    mimeType: string;
    uploadedAt: string;
    updatedAt: string;
    isActive: boolean;
    width: number;
    height: number;
    tags?: Array<string>;
};

export type UploadsSchemaOutput = {
    id: string;
    name: string;
    filePath: string;
    sourceMangaId: string;
    referenceMangaIds: Array<string>;
    imageCategory: string;
    fileSize: number;
    mimeType: string;
    uploadedAt: string;
    updatedAt: string;
    isActive: boolean;
    width: number;
    height: number;
    tags: Array<string>;
    signedUrl: string;
    error?: string;
};

export type GenAiImageOutputSchema = {
    id: string;
    filePath: string;
    prompt: string;
    imageURL: string;
    imageCategory: string;
    isAI: boolean;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};